This repository contains code from the following publication: Jou JD, Jain S, Georgiev I, Donald BR. 
BWM*: A novel, provable ensemble- based dynamic programming algorithm for sparse approximations of 
computational protein design. J Comput Biol. 2016.  We recommend that this be used to test the hypothesis 
and results of protein design with sparse residue interaction graphs as presented in this manuscript.
For new empirical designs, we recommend using the latest version of OSPREY 2.1 
available at http://www.cs.duke.edu/donaldlab/osprey.php that includes continuous sidechain and backbone 
flexibility, ensemble-based design, and new and faster methods to calculate energy functions. 

All the results on the 67 protein design problems discussed in this manuscript are available online at 
http://www.cs.duke.edu/donaldlab/Supplementary/jcb15/bwmstar/


OSPREY Protein Redesign Software Version 2.1 beta 
Copyright (C) 2001-2012 Bruce Donald Lab, Duke University
OSPREY is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.
OSPREY is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, see:
<http://www.gnu.org/licenses/>.
There are additional restrictions imposed on the use and distribution
of this open-source code, including: (A) this header must be included
in any modification or extension of the code; (B) you are required to
cite our papers in any publications that use this code. The citation
for the various different modules of our software, together with a
complete list of requirements and restrictions are found in the
document license.pdf enclosed with this distribution.
Contact Info:
Bruce Donald
Duke University
Department of Computer Science
Levine Science Research Center (LSRC)
Durham
NC 27708-0129
USA
e-mail: www.cs.duke.edu/brd/
<signature of Bruce Donald>, Mar 1, 2012
Bruce Donald, Professor of Computer Science


Technical details specific to running this paper-specific implementation follow.


The runs here are initial experiments to determine for what setups using doBranchDGMEC is most powerful. These runs should not be used for exact run time comparison; rather, these runs should be used to get a general idea of the computational bottlenecks and power of doBranchDGMEC and the related functions.

All runs were performed on hexa.cs.duke.edu, which has 8 Dual Core AMD Opteron(tm) Processor 885 at 2613.712MHz, a total of 64GB RAM.

For a given system, the runs are peformed using the following steps (the example is given with 1amu):

(DEE)
java -Xmx1024M KStar doDEE System.cfg DEE.cfg >! logDEE1amu.cfg


(GBD)
java -Xmx1024M KStar doDEE System.cfg DEEgg.cfg >! logGG1amu.cfg
cd BranchDecomposition
java -Xmx1024M -classpath .:jmatharray.jar BranchDecomposition ../gd_1amu ../gd_1amu_bd >! logBD1amu.out
		gd_1amu_bd - will contain the branch Decomposition.
cd ..
java -Xmx1024M KStar doBranchDGMEC System.cfg GD.cfg >! logGD1amu.out


For the doBranchDGMEC run, -Xmx may have to be increased significantly in some cases (e.g., 10000M-30000M).


Additional commands:

doBWM
doBranchDGMEC 
genSparseGraph
prunedObjInfo - if DEE pruning objects have been computed previously, set to TRUE. Defaults to FALSE.
