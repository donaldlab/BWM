import java.util.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

public class TreeEdge implements Serializable {
	
	private int nodeName1 = -1; //the name of the first incident node
	private int nodeName2 = -1; //the name of the second incident node

	private TreeNode p = null; //the parent node incident to the edge in the rooted tree
	private TreeNode c = null; //the child node incident to the edge in the rooted tree
	
	private boolean isLambdaEdge = false; //determines if this is a lambda edge
	
	private LinkedHashSet<Integer> M = null; //the M set (vertices have molecule index-relative numbering)
	private LinkedHashSet<Integer> L = null; //the L set (vertices have molecule index-relative numbering)
	private LinkedHashSet<Integer> lambda = null; //the lambda set (vertices have molecule index-relative numbering)
	
	private int molResMap[] = null; //maps redesign-order indices to molecule-relative residue numbers
	private int invResMap[] = null; //maps the indices of molecule-relative residue numbers to redesign-order indexing (used in the energy matrices); ligand is mapped last
	
	private int A[][] = null; //the A matrix for the current tree edge
	private float energy[] = null; //the computed energy for each state combination in A
	private int aaRotPos[][][] = null; //the AA and rotamer identities for each state combination in A (only used in the root edge to lookup the best state assignment)
	
	private int sysStrNum = -1; //the strand number in the molecule of the system strand
	
	private int numStates[] = null; //the number of allowed states (unpruned rotamers) for each redesign position
	
	private RotTypeMap rtm[][] = null; //the mapping between state indices and residue/aa/rot tuples
	
	private boolean isRootEdge = false; //determines if this is the root edge
	
	
	public TreeEdge(int eNodeName1, int eNodeName2, LinkedHashSet<Integer> teM,
			int numUnprunedRot[], int molResidueMap[], int invResidueMap[], int sysStrandNum, boolean rootEdge){
		
		nodeName1 = eNodeName1;
		nodeName2 = eNodeName2;
		
		M = new LinkedHashSet<Integer>(teM);
		
		numStates = numUnprunedRot;
		molResMap = molResidueMap;
		invResMap = invResidueMap;
		sysStrNum = sysStrandNum;
		
		isRootEdge = rootEdge;
	}
	
	//Computes the L and lambda sets for this edge; must be called only after p and c have been assigned for all edges
	public void compLlambda(){
		
		computeL(); //compute the L set for this edge
		
		computeLambda(); //compute the lambda set for this edge
		
		if (isLambdaEdge){ //this is a lambda edge
			
			initializeMatrices();
			
			rtm = new RotTypeMap[M.size()+lambda.size()][];
		}
	}
	
	//Computes the L set for the current edge; the L sets for the edges in the subtree rooted at the child for this edge must be already computed
	private void computeL(){
		
		TreeNode clc = c.getlc();
		if (clc!=null) { //child is internal tree node, so both children exist
			LinkedHashSet<Integer> uMc = new LinkedHashSet<Integer>(clc.getCofEdge().getM());
			uMc.addAll(c.getrc().getCofEdge().getM()); //the union of the M sets for the two incident edges with the two children
			L = new LinkedHashSet<Integer>(uMc);
			L.removeAll(M); //the difference between the M set for this edge and the uMc set
			L.addAll(clc.getCofEdge().getL()); //add the L set of the left edge
			L.addAll(c.getrc().getCofEdge().getL()); //add the L set of the right edge
		}
		
		else { //child is leaf tree node, so the L set is the difference between the M set and the two graph vertices for the child
			L = new LinkedHashSet<Integer>();
			L.add(c.getv1());
			L.add(c.getv2());
			L.removeAll(M);
		}
	}
	
	//Computes the lambda set for the current tree edge; must be called after calling computeL()
	private void computeLambda(){
		
		if (L==null){
			System.out.println("ERROR: the L set must be computed before computing lambda");
			System.exit(1);
		}
		
		TreeNode clc = c.getlc();
		if (clc!=null) { //child is internal tree node, so both children exist
			LinkedHashSet<Integer> u = new LinkedHashSet<Integer>(clc.getCofEdge().getL());
			u.addAll(c.getrc().getCofEdge().getL()); //the union of the lambda's for the two incident edges with the two children
			lambda = new LinkedHashSet<Integer>(L);
			lambda.removeAll(u);
		}
		
		else //child is leaf tree node
			lambda = new LinkedHashSet<Integer>(L);
		
		if (!lambda.isEmpty()) //lambda is non-empty
			isLambdaEdge = true;
		else
			isLambdaEdge = false;
	}
	
	//Initialize the A[] and energy[] matrices;
	//		Each entry in the first dimension of A corresponds to a unique state assignment in M; for each such entry,
	//			the second dimension gives the best state for each graph vertex in lambda
	private void initializeMatrices(){
		
		int size = 1;
		for (int i=0; i<numStates.length; i++){
			if (M.contains(molResMap[i])){
				size *= numStates[i];
			}
		}
		
		A = new int[size][lambda.size()];
		energy = new float[size];
		if (isRootEdge)
			aaRotPos = new int[size][numStates.length][2];
		
		for (int i=0; i<size; i++){
			energy[i] = Integer.MAX_VALUE;
			for (int j=0; j<A[i].length; j++){
				A[i][j] = -1;
			}
			if (isRootEdge) {
				for (int j=0; j<aaRotPos[i].length; j++){
					aaRotPos[i][j][0] = -1;
					aaRotPos[i][j][1] = -1;
				}
			}
		}
	}
	
	public LinkedHashSet<Integer> getL(){
		return L;
	}
	
	public LinkedHashSet<Integer> getM(){
		return M;
	}
	
	public boolean getIsLambdaEdge(){
		return isLambdaEdge;
	}
	
	public LinkedHashSet<Integer> getLambda(){
		return lambda;
	}
	
	public int [][] getA(){
		return A;
	}
	
	public TreeNode getc(){
		return c;
	}
	
	//Computes and stores the A matrix for the current edge; must be called after the L and lambda sets for the current edge have already been computed (using compLlambda())
	public void computeA(StrandRotamers sysLR, StrandRotamers ligRot, Molecule m, RotamerLibrary rl, RotamerLibrary grl, 
			boolean prunedRot[], int numTotalRot, int rotIndOffset[], float eMatrix[][][][][][], InteractionGraph G){
		
		int maxDepth = M.size() + lambda.size();
		
		Object arrayM[] = M.toArray();
		Object arrayLambda[] = lambda.toArray();
		
		int curState[] = new int[maxDepth];
		int bestState[] = new int[maxDepth];
		for (int i=0; i<maxDepth; i++){
			curState[i] = -1;
			bestState[i] = -1;
		}
		
		float bestEnergy[] = new float[]{Float.MAX_VALUE};
		
		int bestAArotForPos[][] = null;
		if (isRootEdge) {
			bestAArotForPos = new int[numStates.length][2];
			for (int i=0; i<bestAArotForPos.length; i++){
				for (int j=0; j<bestAArotForPos[i].length; j++)
					bestAArotForPos[i][j] = -1;
			}
		}
		
		computeAhelper(0, maxDepth, arrayM, arrayLambda, sysLR, ligRot, m, rl, grl, prunedRot, numTotalRot, rotIndOffset,
				curState, eMatrix, G, bestState, bestEnergy, bestAArotForPos);
	}
	
	//Called by computeA(.)
	private void computeAhelper(int depth, int maxDepth, Object arrayM[], Object arrayLambda[], StrandRotamers sysLR, StrandRotamers ligRot,
			Molecule m, RotamerLibrary rl, RotamerLibrary grl, boolean prunedRot[], int numTotalRot, int rotIndOffset[], 
			int curState[], float eMatrix[][][][][][], InteractionGraph G, int bestState[], float bestEnergy[], int bestAArotForPos[][]){		
		
		if (depth >= maxDepth){ //end level of recursive calls; call the backtracking procedure to look-up the optimal states for (L-lambda)
			
			LinkedHashSet<Integer> ll = new LinkedHashSet<Integer>(L); //the set difference (L-lambda) for this edge
			ll.removeAll(lambda);
			
			int curStateLL[] = new int[ll.size()];
			TreeEdge curStateLLedges[] = new TreeEdge[ll.size()];
			int curStateLLrtmInd[] = new int[ll.size()];
			Object arrayLL[] = ll.toArray();
			
			int aaRotForPos[][] = null;
			if (isRootEdge) { 
				aaRotForPos = new int[bestAArotForPos.length][];
				for (int i=0; i<aaRotForPos.length; i++){
					aaRotForPos[i] = new int[bestAArotForPos[i].length];
					for (int j=0; j<aaRotForPos[i].length; j++)
						aaRotForPos[i][j] = -1;
				}
			}
			
			bTrack(curStateLLedges, curStateLL, curStateLLrtmInd, arrayLL, curState);
			
			float en = computeEforState(curState,curStateLL,curStateLLrtmInd,curStateLLedges,eMatrix,m,G,aaRotForPos);
			
			if ( (en<bestEnergy[0]) || (bestEnergy[0]==Float.MAX_VALUE) ) { //new best energy, so update to the current state assignment
				
				bestEnergy[0] = en;
				System.arraycopy(curState, 0, bestState, 0, curState.length);
				
				if (isRootEdge) {
					for (int i=0; i<bestAArotForPos.length; i++){
						for (int j=0; j<bestAArotForPos[i].length; j++)
							bestAArotForPos[i][j] = aaRotForPos[i][j];
					}
				}
			}
		}
		
		else { //setup current level
			
			Object vArray[] = null;
			int vInd = -1;
			if (depth < M.size()){ //work on the M set
				vArray = arrayM;
				vInd = depth;
			}
			else { //work on the lambda set
				vArray = arrayLambda;
				vInd = depth - M.size();
			}
			
			rtm[depth] = new RotTypeMap[numStates[invResMap[(Integer)vArray[vInd]]]];
			
			int curPos = invResMap[(Integer)vArray[vInd]];
			
			int curStrandResNum = m.residue[(Integer)vArray[vInd]].strandResidueNumber;
			
			StrandRotamers str = null;
			RotamerLibrary rotLib = null;
			if (m.residue[(Integer)vArray[vInd]].strandNumber==sysStrNum){ //this residue is in the system strand
				str = sysLR;
				rotLib = rl;
			}
			else { //this residue is in the ligand strand
				str = ligRot;
				rotLib = grl;
			}
			
			for(int q=0;q<str.getNumAllowable(curStrandResNum);q++) { //for all allowed amino acid types
				
				int AAindex = str.getIndexOfNthAllowable(curStrandResNum,q);
				
				int numRot = rotLib.getNumRotForAAtype(AAindex);
				if (numRot==0)
					numRot = 1;
				
				for(int w=0;w<numRot;w++) { //for all rotamers
					
					int rotInd = -1;
					if (m.residue[(Integer)vArray[vInd]].strandNumber==sysStrNum){ //this residue is in the system strand
						rotInd = curPos*numTotalRot + rotIndOffset[AAindex] + w;
					}
					else { //this residue is in the ligand strand
						rotInd = curPos*numTotalRot + w;
					}
					
					if (!prunedRot[rotInd]){ //rotamer not pruned, so check
						
						curState[depth]++;
						
						if (rtm[depth][curState[depth]]==null) //store the mapping from state index to residue/aa/rot tuple
							rtm[depth][curState[depth]] = new RotTypeMap(curPos,AAindex,w);
						
						computeAhelper(depth+1, maxDepth, arrayM, arrayLambda, sysLR, ligRot, m, rl, grl, prunedRot, numTotalRot, rotIndOffset,
								curState, eMatrix, G, bestState, bestEnergy, bestAArotForPos);
					}	
				}
			}
			
			curState[depth] = -1;
			
			if ( depth==M.size() ){//done with the lambda states for the current state assignment in M, so update A[] and energy[]
				
				storeBestStateLambda(bestState, arrayM, bestEnergy[0], bestAArotForPos); //store the best state for each vertex in lambda, for the current state assignment in M
				
				bestEnergy[0] = Float.MAX_VALUE;
				
				for (int i=0; i<bestState.length; i++)
					bestState[i] = -1;
				
				if (isRootEdge) {
					for (int i=0; i<bestAArotForPos.length; i++){
						for (int j=0; j<bestAArotForPos[i].length; j++)
							bestAArotForPos[i][j] = -1;
					}
				}
			}
		}
	}
	
	//Backtracking procedure for the matrix computation (for a given state assignment in (M u lambda), looks up the optimal states for (L-lambda) )
	private void bTrack(TreeEdge curStateLLedges[], int curStateLL[], int curStateLLrtmInd[], Object topArrayLL[], int curState[]){
		                          
		boolean lookedUp[] = new boolean[topArrayLL.length];
		for (int i=0; i<lookedUp.length; i++)
			lookedUp[i] = false;
		
		bTrackHelper(this, curStateLLedges, curStateLL, curStateLLrtmInd, topArrayLL, curState, lookedUp);
	}
	
	//Called by bTrack(.) and recursively
	private void bTrackHelper(TreeEdge e, TreeEdge curStateLLedges[], int curStateLL[], int curStateLLrtmInd[], Object topArrayLL[], int curState[], boolean lookedUp[]){		
		
		//Compute the F set of edges for the child of edge e
		LinkedHashSet<TreeEdge> F = new LinkedHashSet<TreeEdge>();
		bTrackHelperFset(e.getc(),F);
		Object arrayF[] = F.toArray();
		
		
		//Find the state assignments for the edges in the M sets of each of the edges in the set F
		int fkMstate[][] = new int[arrayF.length][];
		for (int i=0; i<fkMstate.length; i++)
			fkMstate[i] = e.getMstateForEdgeCurState(curState,(TreeEdge)arrayF[i]);
		
		
		//First, find the state assignment for all vertices in (L-lambda) by checking the lambda sets for all edges in the set Fi
		for (int i=0; i<lookedUp.length; i++){ //all graph vertices in (L-lambda)
			
			if (!lookedUp[i]) { //not already looked up
			
				for (int j=0; j<arrayF.length; j++){ //all tree edges in F
					
					TreeEdge fk = (TreeEdge)arrayF[j];
					
					if (fk!=null) {
						
						if (fk.getLambda().contains(topArrayLL[i])){ //perform computation only if topArrayLL[i] is in the lambda set of edge fk
							
							lookedUp[i] = true;
							
							int eRTMind[] = new int[]{-1};
							
							curStateLL[i] = e.getStateForV((Integer)topArrayLL[i],fk,eRTMind,fkMstate[j]);
							curStateLLrtmInd[i] = eRTMind[0];
							
							curStateLLedges[i] = fk;
							
							break;
						}
					}
					
					if (lookedUp[i])
						break;
				}
			}
		}
		
		
		//Find the state assignments for the edges in the lambda sets of each of the edges in the set F
		int fkLambdaState[][] = new int[arrayF.length][];
		for (int i=0; i<fkMstate.length; i++){
			Object fkM[] = ((TreeEdge)arrayF[i]).getM().toArray();
			fkLambdaState[i] = ((TreeEdge)arrayF[i]).getA()[((TreeEdge)arrayF[i]).computeIndexInA(fkMstate[i],fkM)];
		}
		
		
		//For each edge in the set F, combine the state assignments for the M and lambda sets into a single array
		int fkMLambda[][] = new int[arrayF.length][];
		for (int i=0; i<fkMstate.length; i++){
			fkMLambda[i] = new int[fkMstate[i].length+fkLambdaState[i].length];
			System.arraycopy(fkMstate[i], 0, fkMLambda[i], 0, fkMstate[i].length);
			System.arraycopy(fkLambdaState[i], 0, fkMLambda[i], fkMstate[i].length, fkLambdaState[i].length);
		}
		
		
		//This second iteration is necessary (and not part of the first iteration) to ensure that all graph vertices in lambda(fk) for any fk in the current F have been looked up
		for (int i=0; i<lookedUp.length; i++){ //all graph vertices in (L-lambda)
			
			if (!lookedUp[i]) { //optimal state for the current graph vertex not found yet
				
				for (int j=0; j<arrayF.length; j++){ //all tree edges in Fi
					
					TreeEdge fk = (TreeEdge)arrayF[j];
					
					if (fk!=null) {
						
						if ( fk.getL().contains(topArrayLL[i]) ){ //arrayLL[i] is in the (L-lambda) set of fk (lambda is checked in the first iteration of lookedUp[])
							
							bTrackHelper(fk, curStateLLedges, curStateLL, curStateLLrtmInd, topArrayLL, fkMLambda[j], lookedUp); //recursively call the backtracking procedure
						}
					}
				}
			}
		}
	}
	
	//Called by bTrackHelper(.); finds the tree edges belonging to the set F starting at the sub-tree rooted at the tree node tn
	private void bTrackHelperFset(TreeNode tn, LinkedHashSet<TreeEdge> F){
		
		TreeNode clc = tn.getlc();
		TreeNode crc = tn.getrc();
		
		if (clc!=null){
			TreeEdge clce = clc.getCofEdge();
			if (clce.getIsLambdaEdge()) //if clce is a lambda edge, add it to Fi, and do not travers the subtree rooted at clc
				F.add(clce);
			else //not a lambda edge, so traverse the subtree rooted at clc
				bTrackHelperFset(clc,F);				
		}
		
		if (crc!=null){
			TreeEdge crce = crc.getCofEdge();
			if (crce.getIsLambdaEdge()) 
				F.add(crce);
			else
				bTrackHelperFset(crc,F);			
		}
	}
	
	//Computes the state of all vertices in e.M (returned in eMstate[]) corresponding to the state assignment curState[] for this edge;
	//NOTE: This must be called only when edge e is in the F set of this edge
	public int [] getMstateForEdgeCurState(int curState[], TreeEdge e){
		
		int eMstate[] = new int[e.getM().size()];
		
		Object curM[] = M.toArray();
		Object curLambda[] = lambda.toArray();
		Object MLambda[] = new Object[curM.length+curLambda.length];
		System.arraycopy(curM, 0, MLambda, 0, curM.length);
		System.arraycopy(curLambda,0,MLambda,curM.length,curLambda.length);
		curM = null; curLambda = null;
		
		Object eM[] = e.getM().toArray();
		
		for (int i=0; i<eM.length; i++){ //find the state for each vertex in e.M (it must be either in this.M or this.lambda)
			
			eMstate[i] = -1;
			
			for (int j=0; j<MLambda.length; j++){
				
				int eMi = ((Integer)eM[i]).intValue();
				int MLambdaj = ((Integer)MLambda[j]).intValue();
				
				if (eMi==MLambdaj){
					
					int p = rtm[j][curState[j]].pos;
					int a = rtm[j][curState[j]].aa;
					int r = rtm[j][curState[j]].rot;
					
					RotTypeMap ertm[] = e.getrtm()[i];
					for (int k=0; k<ertm.length; k++){
						if ( (ertm[k].pos==p) && (ertm[k].aa==a) && (ertm[k].rot==r) ){ //found state for vertex eM[i]
							eMstate[i] = k;
							break;
						}
					}
					break;
				}
			}
		}
		
		return eMstate;
	}
	
	//Given the state assignments in eMstate[] (for edge e), get the state assignment for the graph vertex v from the tree edge e;
	//NOTE: This must be called only when edge e is in the F set of this edge
	//	Also computes the index of v into the first dimension of the rtm of edge e, and returns this index into eRTMind[0];
	public int getStateForV(int v, TreeEdge e, int eRTMind[], int eMstate[]){
		
		Object eM[] = e.getM().toArray();
		
		int vInd = -1;
		Object eLambda[] = e.getLambda().toArray();
		for (int i=0; i<eLambda.length; i++){
			
			if ((Integer)eLambda[i]==v){ //graph vertex found in e.lambda
				
				vInd = i; //the index of v into the lambda set of edge e
				
				//Find the index of v into the first dimension of the rtm of edge e
				RotTypeMap ertmAll[][] = e.getrtm();
				for (int j=0; j<ertmAll.length; j++){
					if (ertmAll[j][0].pos==invResMap[v]) { //found index of v into the first dimension of the rtm of edge e
						eRTMind[0] = j;
						break;
					}
				}
				
				break;
			}
		}
		
		return e.getA()[e.computeIndexInA(eMstate,eM)][vInd]; //return the best state for graph vertex v using the information in e.A
	}
	
	//Compute the (partial) energy for the given state assignment;
	//	Includes the shell, intra, pairwise, and res-to-template energies of the residue positions in (M u L) for this edge;
	//	Only include pairwise interactions if an edge is present in the residue interaction graph;
	//  For each flexible position (redesign order indexing) in the (M u L) for this edge, returns the AA and rot identity into aaRotForPos[][]
	private float computeEforState(int curState[], int curStateLL[], int curStateLLrtmInd[], TreeEdge curStateLLedges[], float eMatrix[][][][][][], 
			Molecule m, InteractionGraph G, int aaRotForPos[][]){
		
		float en = eMatrix[eMatrix.length-1][0][0][0][0][0]; // Add shell-shell energy
		
		int numPos = M.size() + L.size();
		
		for (int i=0; i<numPos; i++){
			
			int curIndi = -1;
			int pi = -1;
			int ai = -1;
			int ri = -1;
			
			if (i<(M.size()+lambda.size())) { //vertex is in (M or lambda)
				curIndi = i;
				pi = rtm[curIndi][curState[curIndi]].pos;
				ai = rtm[curIndi][curState[curIndi]].aa;
				ri = rtm[curIndi][curState[curIndi]].rot;
			}
			else { //vertex is in (L-lambda)
				curIndi = i - (M.size()+lambda.size());
				pi = curStateLLedges[curIndi].getrtm()[curStateLLrtmInd[curIndi]][curStateLL[curIndi]].pos;
				ai = curStateLLedges[curIndi].getrtm()[curStateLLrtmInd[curIndi]][curStateLL[curIndi]].aa;
				ri = curStateLLedges[curIndi].getrtm()[curStateLLrtmInd[curIndi]][curStateLL[curIndi]].rot;
			}
			
			en += eMatrix[pi][ai][ri][pi][0][1]; // Add the rotamer-shell energy			
			en += eMatrix[pi][ai][ri][pi][0][0]; // Add the intra-rotamer energy	
			
			for (int j=i+1; j<numPos; j++){
				
				int curIndj = -1;
				int pj = -1;
				int aj = -1;
				int rj = -1;
				
				if (j<(M.size()+lambda.size())) { //vertex is in (M or lambda)
					curIndj = j;
					pj = rtm[curIndj][curState[curIndj]].pos;
					aj = rtm[curIndj][curState[curIndj]].aa;
					rj = rtm[curIndj][curState[curIndj]].rot;
				}
				else { //vertex is in (L-lambda)
					curIndj = j - (M.size()+lambda.size());
					pj = curStateLLedges[curIndj].getrtm()[curStateLLrtmInd[curIndj]][curStateLL[curIndj]].pos;
					aj = curStateLLedges[curIndj].getrtm()[curStateLLrtmInd[curIndj]][curStateLL[curIndj]].aa;
					rj = curStateLLedges[curIndj].getrtm()[curStateLLrtmInd[curIndj]][curStateLL[curIndj]].rot;
				}
				
				if (G.edgeExists(molResMap[pi], molResMap[pj])) { //the two residues interact in the interaction graph, so add their pairwise energy
					en += eMatrix[pi][ai][ri][pj][aj][rj];
				}
			}
			
			if (isRootEdge) {
				aaRotForPos[pi][0] = ai;
				aaRotForPos[pi][1] = ri;
			}
		}

		return en;
	}
	
	//Compute the best state for each vertex in lambda, for the given state assignment in M
	private void storeBestStateLambda(int curState[], Object arrayM[], float curEnergy, int curAArotPos[][]) {
		
		/*System.out.print("Storing best energy for M state: ");
		for (int i=0; i<M.size(); i++)
			System.out.print(curState[i]+" ");
		System.out.println("..");*/
		
		int curIndInA = computeIndexInA(curState, arrayM); //get the index corresponding to the current state assignment in M
		
		for (int i=0; i<lambda.size(); i++){
			A[curIndInA][i] = curState[arrayM.length+i];
		}
		
		energy[curIndInA] = curEnergy;
		
		if (isRootEdge) {
			for (int i=0; i<aaRotPos[curIndInA].length; i++){
				for (int j=0; j<aaRotPos[curIndInA][i].length; j++)
					aaRotPos[curIndInA][i][j] = curAArotPos[i][j];
			}
		}
	}
	
	//Compute the index into the A matrix for this tree edge, given the state assignments for the vertices in M in curState[]
	public int computeIndexInA(int curState[], Object arrayM[]){
		
		if (isRootEdge) //the M set is empty for the root edge
			return 0;
		
		int index = 0;
		int s = 1;
		
		index += curState[arrayM.length-1];
		for (int i=(arrayM.length-2); i>=0; i--){ //find the state assignment for the vertices in M
			
			if (curState[i]<0){
				System.out.println("ERROR: GD state not fully assigned");
				System.exit(1);
			}
			
			s *= numStates[invResMap[(Integer)arrayM[i+1]]];
			index += (curState[i] * s);
		}
		
		return index;
	}
	
	//Maps state indices to residue/aa/rot tuples
	private class RotTypeMap {
		int pos = -1;
		int aa = -1;
		int rot = -1;
		RotTypeMap(int p, int a, int r){
			pos = p;
			aa = a;
			rot = r;
		}
	}
	
	public RotTypeMap[][] getrtm(){
		return rtm;
	}
	
	public void setP(TreeNode pn){
		p = pn;
	}
	
	public void setC(TreeNode cn){
		c = cn;
	}
	
	public int getNodeName1(){
		return nodeName1;
	}
	
	public int getNodeName2(){
		return nodeName2;
	}
	
	public boolean getIsRootEdge(){
		return isRootEdge;
	}
	
	//Finds the best energy and outputs the corresponding state, using the information for this edge;
	//	This must be called only for the root edge, since otherwise not all elements of aaRotPos[bestInd][][] are defined
	public void outputBestStateE(Molecule m, RotamerLibrary rl, String ligType){
		
		if (!isRootEdge) {
			System.out.println("ERROR: cannot output best state for non-root edges");
			System.exit(1);
		}
		
		int bestInd = -1;
		float bestE = Float.MAX_VALUE;
		for (int i=0; i<energy.length; i++){ //check all energies
			if (energy[i]<bestE){ //found a new lowest energy
				bestE = energy[i];
				bestInd = i;
			}
		}
		
		System.out.print("GMEC: ");
		
		for (int i=0; i<aaRotPos[bestInd].length; i++) { //output the AAs
			
			if (m.residue[molResMap[i]].strandNumber==sysStrNum) //this residue is in the system strand
				System.out.print(rl.getAAName(aaRotPos[bestInd][i][0])+" ");
			
			else //this residue is in the ligand strand
				System.out.print(ligType+" ");
		}
		
		for (int i=0; i<aaRotPos[bestInd].length; i++) //output the rotamers
			System.out.print(aaRotPos[bestInd][i][1]+" ");
		
		System.out.println(energy[bestInd]); //output the energy
	}
	
	//Returns a deep copy of this TreeEdge (modified from http://javatechniques.com/blog/faster-deep-copies-of-java-objects/, accessed 10/30/2008)
	public TreeEdge deepCopy(){
		TreeEdge c = null;
		try {
			ByteArrayOutputStream b = new ByteArrayOutputStream();
			ObjectOutputStream fout = new ObjectOutputStream(b);
			fout.writeObject(this);
			fout.flush();
			fout.close();
			
			ObjectInputStream fin = new ObjectInputStream(new ByteArrayInputStream(b.toByteArray()));
			c = (TreeEdge)fin.readObject();
		}
		catch (Exception e){
			System.out.println("ERROR: "+e);
			System.exit(1);
		}
		return c;
	}
}
